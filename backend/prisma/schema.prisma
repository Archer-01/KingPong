// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum Status {
  OFFLINE
  ONLINE
  INGAME
}

enum League {
    BRONZE
    SILVER
    GOLD
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  fullname  String
  password  String?
  avatar    String
  status    Status   @default(OFFLINE)
  stats     Stats?
  achievements Achievement[]
  Notifications Notification[]
  friends User[] @relation("friends")
  twoFactorSecret String @default("")
  twoFactorEnabled Boolean @default(false)
  needOtp Boolean @default(true)
  friendOf User[] @relation("friends")
  sentFriendRequests FriendRequest[] @relation("sender")
  pendingFriendRequests FriendRequest[] @relation("receiver")
  gamesAsPlayer1 Game[] @relation("player1")
  gamesAsPlayer2 Game[] @relation("player2")
  dms1 DM[] @relation("user1")
  dms2 DM[] @relation("user2")
  sentMessages Message[] @relation("sender")
  createdAt DateTime @default(now())
}

model Stats {
    id String @id @default(cuid())
    wins Int @default(0)
    losses Int @default(0)
    level Int @default(0)
    XP Int @default(0)
    NextLevelXP Int @default(100)
    league League @default(BRONZE)
    rank Int @default(500)
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    createdAt DateTime @default(now())
}

enum AchievementType {
    BRONZE
    SILVER
    GOLD
}
model Achievement {
    id String @id @default(cuid())
    title String @unique
    description String
    type AchievementType
    users User[]
    createdAt DateTime @default(now())
}

enum NotifType {
  GAME
  FRIEND
}

model Notification {
  id        String   @id @default(cuid())
  readed    Boolean  @default(false)
  type      NotifType
  userId    String @unique
  user     User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model FriendRequest {
    @@id([senderId, receiverId])
    senderId String @unique
    receiverId String @unique
    sender User @relation("sender", fields: [senderId], references: [id])
    receiver User @relation("receiver", fields: [receiverId], references: [id])
}

model Game {
    id String @id @default(cuid())
    player1 User @relation("player1", fields: [player1Id], references: [id])
    player1Id String
    player2 User @relation("player2", fields: [player2Id], references: [id])
    player2Id String
    player1_score Int @default(0)
    player2_score Int @default(0)
    ranked Boolean @default(false)
    createdAt DateTime @default(now())
}

model DM {
    id String @id @default(cuid())

    user1 User @relation("user1", fields: [user1Id], references: [id])
    user1Id String

    user2 User @relation("user2", fields: [user2Id], references: [id])
    user2Id String

    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id String @id @default(cuid())

    dm DM @relation(fields: [dm_id], references: [id])
    dm_id String

    sender User @relation("sender", fields: [senderId], references: [id])
    senderId String

    content String
    createdAt DateTime @default(now())
}
